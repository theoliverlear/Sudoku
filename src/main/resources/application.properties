#=========================-Spring-Web-Configuration===========================

# This property configures caching for static resources. It sets the maximum
# age for the cache. It's set to 0 seconds which means no caching is enabled.
# This is typical for development settings where you want changes in your
# static resources to be immediately visible.
spring.web.resources.cache.cachecontrol.max-age=0s

# Configures the logging level for org.springframework.web classes. Setting this
# to DEBUG results in outputting debugging information in your logs.
logging.level.org.springframework.web=DEBUG

#--------------------------DevTools-Configuration-----------------------------
# This property specifies the interval at which classpath will be scanned for
# changes. The default value is 1 second. It's set to 2 seconds here which
# means the application will restart every two seconds if changes are detected
# on the classpath.
spring.devtools.restart.poll-interval=2s

# This property enables automatic application restart whenever files on the
# classpath change. It's very useful during development as it saves you from
# manually restarting your application every time you make some changes.
spring.devtools.restart.enabled=true

# This property specifies additional paths that should be monitored for changes.
# A restart will be triggered if changes are detected in these paths. It is
# specifically set to include the 'src/main/java' and 'src/main/resources' paths.
spring.devtools.restart.additional-paths=src/main/java,src/main/resources

# This property specifies paths to exclude from watching for changes. By default,
# certain paths like '/META-INF/maven', '/META-INF/resources', '/resources',
# '/static', '/public', '/templates' are ignored. If you want these paths to be
# watched as well, you can specify them in 'additional-paths' property and leave
# this one empty.
spring.devtools.restart.exclude=

# LiveReload is a technology that allows the browser to automatically refresh
# the page whenever file changes in your project. It uses a specific port to
# listen for live reload. It's set to 8080 in this case.
#spring.devtools.livereload.port=8080

# This property is used to enable LiveReload. When you make a change in your
# project, LiveReload will refresh your browser.
spring.devtools.livereload.enabled=true

#-----------------------Template-Engines-Configuration------------------------
# Thymeleaf and Freemarker views caching is disabled for development. It means,
# any changes in your views will be immediately visible.
spring.thymeleaf.cache=false
spring.freemarker.cache=false

#------------------------------Spring-Security--------------------------------

#==========================-Database-Configuration============================

# This property is used to configure the database URL. It's set to the value
# of the local H2 database. The database is stored in the 'db/sudoku_db'.
spring.datasource.url=jdbc:h2:C:/Users/olive/GitHub/Sudoku/db/sudoku_db/sudoku_db

# This property is used to configure the database login username. It's set to
# the value of the 'H2_USER' environment variable.
spring.datasource.username=${H2_USER}

# This property is used to configure the database login password. It's set to
# the value of the 'H2_PW' environment variable.
spring.datasource.password=${H2_PW}

# This property is used to configure the name of the database driver. It's set
# to false to not automatically generate a unique database name.
spring.datasource.generate-unique-name=false

# This property is used to configure the name of the database. It's set to
# 'sudoku_db'.
spring.datasource.name=sudoku_db

# This property is used to configure the dialect of the database. It's set to
# the value of the the dialect of the H2 database which is a relational
# database style of SQL.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# This property is used to configure the Hibernate DDL (Data Definition
# Language) mode. It's set to 'create' which means Hibernate will create the
# database tables based on the entity mappings.
# spring.jpa.hibernate.ddl-auto=create
spring.jpa.hibernate.ddl-auto=update

# This property is used to configure the JPA logging for SQL statements. It's
# set to 'true' which means SQL statements will be logged.
spring.jpa.show-sql=true
#========================-Spring-SSL-Configuration============================

# This property is used to enable SSL support. It's disabled by default.
server.ssl.enabled=true

# This property is used to configure the port on which the application will
# listen for SSL requests. The default value is 8443.
server.port=8443

# This property is used to configure the path to the SSL keystore file. The
# keystore file holds the SSL certificate. It's set to 'keystore.p12' file
# in the 'src/main/resources/static/ssl' directory.
server.ssl.key-store=src/main/resources/static/ssl/keystore.p12

# This property is used to configure the password that unlocks the SSL keystore
# file. It's set to the value of the 'SUDOKU_SSL_PW' environment variable.
server.ssl.key-store-password=${SUDOKU_SSL_PW}

# This property is used to configure the type of the SSL keystore file. It's
# set to 'PKCS12' which is a standard that holds the private key.
server.ssl.keyStoreType=PKCS12

# This property is used to configure the alias of the SSL certificate in the
# keystore file. It's set to 'tomcat' which is the default alias.
server.ssl.keyAlias=tomcat
