package org.theoliverlear.entity;

import jakarta.persistence.*;
import org.theoliverlear.entity.Board;
import org.theoliverlear.entity.convert.BoardIndexArrayListConverter;
import org.theoliverlear.model.sudoku.BoardIndex;

import java.util.ArrayList;

@Entity
@DiscriminatorValue("MutedBoard")
@Table(name = "boards")
@Inheritance(strategy = InheritanceType.SINGLE_TABLE)
public class MutedBoard extends Board {
    //=============================-Variables-================================
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    public MutedBoard() {
        super();
    }
    @Column(name = "muted_indices")
    @Convert(converter = BoardIndexArrayListConverter.class)
    ArrayList<BoardIndex> mutedIndices = new ArrayList<>();
    //===========================-Constructors-===============================
    public MutedBoard(int[][] mutedBoard) {
        super(mutedBoard);
        this.fetchMutedIndices();
    }
    public MutedBoard(Board board) {
        super(board.getBoard());
        this.fetchMutedIndices();
    }
    //==============================-Methods-=================================

    //--------------------------Fetch-Muted-Indices---------------------------
    public void fetchMutedIndices() {
        // For each row and column, if the value is not 0, it is assumed that
        // the value was generated by the server and should not be changed by
        // the client. Therefore, the index of the value is added to the muted
        // indices.
        for (int row = 0; row < this.rowLength; row++) {
            for (int column = 0; column < this.colLength; column++) {
                if (this.board[row][column] != 0) {
                    this.muteBoardIndex(row + 1, column + 1);
                }
            }
        }
    }
    //=============================-Overrides-================================
    @Override
    public void placeNumber(int row, int column, int number) {
        int[] potentialPlaceIndex = {row - 1, column - 1};
        BoardIndex boardIndex = new BoardIndex(potentialPlaceIndex);
        if (!this.mutedIndices.contains(boardIndex)) {
            super.placeNumber(row, column, number);
        }
    }
    //--------------------------Mute-Board-Index------------------------------
    public void muteBoardIndex(int row, int column) {
        int[] muteIndex = {row - 1, column - 1};
        BoardIndex boardIndex = new BoardIndex(muteIndex);
        this.mutedIndices.add(boardIndex);
    }
    //=============================-Getters-==================================
    public ArrayList<BoardIndex> getMutedIndices() {
        return this.mutedIndices;
    }
    //=============================-Setters-==================================
    public void setMutedIndices(ArrayList<BoardIndex> mutedIndices) {
        this.mutedIndices = mutedIndices;
    }
}
